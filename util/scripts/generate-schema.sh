#!/bin/bash
set -o errexit -o nounset -o pipefail

SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
MSGS_DIR="${SCRIPT_PATH}/schemas/msgs"
SCHEMAS_DIR="${SCRIPT_PATH}/schemas"
INDEX_FILE="${MSGS_DIR}/index.ts"

PROTO_DIRS=(
  "cosmos-sdk/proto"
  "ibc-go-main/proto"
  "wasmd-main/proto"
  "intento/proto"
)

# Initial cleanup
mkdir -p "$MSGS_DIR"
echo "Cleaning up existing schema files..."
rm -f "${MSGS_DIR}"/*.json "${MSGS_DIR}/schemaNames.ts"

for PROTO_DIR in "${PROTO_DIRS[@]}"; do
  echo "=== Processing proto directory: $PROTO_DIR ==="

  cd "${SCRIPT_PATH}/${PROTO_DIR}"

  echo "Finding proto files..."
  proto_files=$(find . -name '*.proto' -type f -exec grep -l "go_package" {} +)

  if [ -z "$proto_files" ]; then
    echo "No proto files found in $PROTO_DIR with go_package directive"
    continue
  fi

  echo "Generating code for proto files..."
  for file in $proto_files; do
    echo "  Generating schema for: $file"
    buf generate --template "${SCRIPT_PATH}/buf.gen.yaml" "$file"
  done
done

cd "$SCRIPT_PATH"

# Rename and flatten schema structure
echo "Flattening schema file structure..."
find "${MSGS_DIR}" -mindepth 1 -type d | while read -r dir; do
  dir_name=$(basename "$dir" | tr '.' '_' | tr '-' '_' | tr '[:upper:]' '[:lower:]')
  find "$dir" -maxdepth 1 -type f -name "*.json" | while read -r file; do
    new_file_name="${dir_name}_$(basename "$file")"
    mv "$file" "${MSGS_DIR}/${new_file_name}"
  done
  rmdir "$dir" 2>/dev/null || true
done

# Move files from _msgs if it exists
if [ -d "${SCHEMAS_DIR}/_msgs" ]; then
  echo "Found _msgs directory, moving files..."
  mkdir -p "$MSGS_DIR"
  find "${SCHEMAS_DIR}/_msgs" -name '*.json' -exec mv -v {} "$MSGS_DIR/" \;
  rmdir "${SCHEMAS_DIR}/_msgs" 2>/dev/null || true
fi

# Process Msg JSON files
SCHEMA_NAMES_FILE="${MSGS_DIR}/schemaNames.ts"
echo "Generating schemaNames.ts..."
echo "export const schemaNames = [" > "$SCHEMA_NAMES_FILE"

for json_file in "${MSGS_DIR}"/*.json; do
  if [ -f "$json_file" ]; then
    file_name=$(basename "${json_file%.*}")
    if [[ "$file_name" == *Msg* && "$file_name" != *Response ]]; then
      echo "  Processing $file_name"
      updated_json=$(jq '
        def snake_to_camel: gsub( "_(?<a>[a-z])"; .a|ascii_upcase);
        def add_additional_properties:
            if type == "object" then
                if any(values[]; type == "object" and has("typeUrl")) then
                    . + {"additionalProperties": true}
                else
                    with_entries(if .value | type == "object" then .value |= add_additional_properties else . end)
                end
            else
                .
            end;
        walk(if type == "object" then with_entries(.key |= snake_to_camel) else . end) |
        walk(if type == "object" and .msg? and .msg.type == "string" and .msg.format == "binary" then .msg = {
          "type": "object",
          "description": "is an object and will be encoded to a string before submission .",
          "additionalProperties": true
        } else . end) |
        walk(add_additional_properties) |
        walk(if type == "object" and .value? and .value.type == "string" and .value.description == "Must be a valid serialized protocol buffer of the above specified type." and .value.format == "binary" and .value.binaryEncoding == "base64" then del(.value) else . end)
      ' "$json_file")

      echo "$updated_json" | jq 'del(."$schema")' > "$json_file"
      echo "  \"$file_name\"," >> "$SCHEMA_NAMES_FILE"
    else
      rm -f "$json_file"
    fi
  fi
done

echo "] as const;" >> "$SCHEMA_NAMES_FILE"
echo 'export type SchemaNames = (typeof schemaNames)[number];' >> "$SCHEMA_NAMES_FILE"

# Generate index.ts
echo "Generating index.ts..."
echo "// Auto-generated index file that exports all JSON schema files" > "$INDEX_FILE"
echo "// This file is automatically generated by generate-schema.sh" >> "$INDEX_FILE"
echo "" >> "$INDEX_FILE"

for json_file in "${MSGS_DIR}"/*.json; do
  file_name=$(basename "${json_file%.*}")
  echo "export { default as $file_name } from './$file_name.json';" >> "$INDEX_FILE"
done

echo -e "\n// Export schema names" >> "$INDEX_FILE"
echo 'export * from "./schemaNames";' >> "$INDEX_FILE"

echo "âœ… Done generating schemas and exports in $MSGS_DIR"
