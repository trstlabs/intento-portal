syntax = "proto3";

package intento.intent.v1; // TODO: Change to v1

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "stride/interchainquery/v1/genesis.proto";

option go_package = "github.com/trstlabs/intento/x/intent/types";
option (gogoproto.equal_all) = true;
option (gogoproto.goproto_getters_all) = false;

// FlowInfo stores the info for the flow
message FlowInfo {
  uint64 id = 1 [(gogoproto.customname) = "ID"];
  string owner = 2;
  string label = 3;
  string fee_address = 4;
  repeated google.protobuf.Any msgs = 5 [(cosmos_proto.accepts_interface) = "sdk.Msg"];
  google.protobuf.Duration interval = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "interval,omitempty"
  ];
  google.protobuf.Timestamp start_time = 7 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  google.protobuf.Timestamp exec_time = 8 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  google.protobuf.Timestamp end_time = 9 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  repeated google.protobuf.Timestamp update_history = 10 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  ICAConfig self_hosted_ica_config = 11 [(gogoproto.customname) = "SelfHostedICAConfig"];
  TrustlessAgentExecutionConfig trustless_agent_config = 12 [(gogoproto.customname) = "TrustlessAgentExecutionConfig"];
  ExecutionConfiguration configuration = 14;
  ExecutionConditions conditions = 15;
}

// base config for ICA
message ICAConfig {
  string port_id = 1 [(gogoproto.customname) = "PortID"];
  string connection_id = 2 [(gogoproto.customname) = "ConnectionID"];
}

// config for trustless excution agent
message TrustlessAgentExecutionConfig {
  string agent_address = 1;
  cosmos.base.v1beta1.Coin fee_coin_limit = 3 [(gogoproto.nullable) = false];
}

// ExecutionConfiguration provides the execution-related configuration of the
// flow
message ExecutionConfiguration {
  // if true, the flow response outputs are saved and can be used in logic
  bool save_responses = 1;
  // if true, the flow is not updatable
  bool updating_disabled = 2;
  // If true, will execute until we get a successful Flow, if false/unset will
  // always execute
  bool stop_on_success = 3;
  // If true, will execute until successful Flow, if false/unset will always
  // execute
  bool stop_on_failure = 4;
  // If true, will stop if message times oiut
  bool stop_on_timeout = 5;
  // If true, owner account balance is used when trigger account funds run out
  bool fallback_to_owner_balance = 6;
}

// FlowHistory execution history
message FlowHistory {
  repeated FlowHistoryEntry history = 1 [(gogoproto.nullable) = false];
}

// FlowHistoryEntry provides a the history of flow interchain tx call
message FlowHistoryEntry {
  google.protobuf.Timestamp scheduled_exec_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  google.protobuf.Timestamp actual_exec_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin exec_fee = 3 [(gogoproto.nullable) = false];
  // whether all messages are executed, independent of succesfull result
  bool executed = 4;
  // timed out from execution over IBC
  bool timed_out = 5;
  // errors from execution, if executed and no error the execution was
  // succesfull
  repeated string errors = 6;
  // will be empty when save_responses is false
  repeated google.protobuf.Any msg_responses = 7;
  // will be empty when save_responses is false
  repeated string query_responses = 8;
  // packet sequence of the flow execution on the host chain
  uint64 packet_sequence = 9;
}

// ExecutionConditions provides execution conditions for the flow
message ExecutionConditions {
  // Replace value with value from message or response from another flow’s
  // latest output
  repeated FeedbackLoop feedback_loops = 2;
  // Comparison with response response value
  repeated Comparison comparisons = 1;
  // optional array of dependent intents that when executing succesfully, stops
  // execution
  repeated uint64 stop_on_success_of = 5;
  // optional array of dependent intents that when not executing succesfully,
  // stops execution
  repeated uint64 stop_on_failure_of = 6;
  // optional array of dependent intents that should be executed succesfully
  // after their latest call before execution is allowed
  repeated uint64 skip_on_failure_of = 7;
  // optional array of dependent intents that should fail after their latest
  // call before execution is allowed
  repeated uint64 skip_on_success_of = 8;
  bool use_and_for_comparisons = 9; //True: Use AND for combining comparisons. False: Use OR for combining comparisons.
}

// Replace value with value from message or response from another flow’s
// latest output before execution
message FeedbackLoop {
  uint64 flow_id = 1 [(gogoproto.customname) = "FlowID"]; // flow to get the latest response value from, optional
  uint32 response_index = 3; // index of the responses
  string response_key = 2; // for example "Amount"
  uint32 msgs_index = 4; // index of the msg to replace
  string msg_key = 5; // key of the message to replace (e.g. Amount[0].Amount, FromAddress)
  string value_type = 6; // can be anything from sdk.Int, sdk.Coin, sdk.Coins, string, []string, []sdk.Int
  //bool calculate_difference = 7; //True: calculate the difference with the previous value instead of using the value directly.
  ICQConfig icq_config = 8 [(gogoproto.customname) = "ICQConfig"]; // config of ICQ to perform
}

// Comparison is checked on the response in JSON before execution of
// flow and outputs true or false
message Comparison {
  uint64 flow_id = 1 [(gogoproto.customname) = "FlowID"]; // get the latest response value from other flow, optional
  uint32 response_index = 2; // index of the message response, optional
  string response_key = 3; // e.g. Amount[0].Amount, FromAddress, optional
  string value_type = 4; // can be anything from sdk.Int, sdk.Coin, sdk.Coins, string, []string, []sdk.Int
  ComparisonOperator operator = 5;
  string operand = 6;
  //bool calculate_difference = 7; //True: Calculate the difference with the previous value.
  ICQConfig icq_config = 8 [(gogoproto.customname) = "ICQConfig"]; // config of ICQ to perform
}

// enum AfterGetValueOperator {
//   PARSE = 0;
//   MULITPLY = 1;
//   DIVIDE = 2;
//   SUBSTRACT = 3;
//   ADD = 4;
// }

// Comparison operators that can be used for various types.
enum ComparisonOperator {
  EQUAL = 0; // Equality check (for all types)
  CONTAINS = 1; // Contains check (for strings, arrays, etc.)
  NOT_CONTAINS = 2; // Not contains check (for strings, arrays, etc.)
  SMALLER_THAN = 3; // Less than check (for numeric types)
  LARGER_THAN = 4; // Greater than check (for numeric types)
  GREATER_EQUAL = 5; // Greater than or equal to check (for numeric types)
  LESS_EQUAL = 6; // Less than or equal to check (for numeric types)
  STARTS_WITH = 7; // Starts with check (for strings)
  ENDS_WITH = 8; // Ends with check (for strings)
  NOT_EQUAL = 9; // Not equal check (for all types)
}

// config for using interchain queries
message ICQConfig {
  string connection_id = 1;
  string chain_id = 2;
  stride.interchainquery.v1.TimeoutPolicy timeout_policy = 3;
  google.protobuf.Duration timeout_duration = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true
  ];
  string query_type = 5; // e.g. store/bank/key store/staking/key
  string query_key = 6; // key in the store that stores the query e.g. stakingtypes.GetValidatorKey(validatorAddressBz)
  bytes response = 7; //should be reset after execution
}
