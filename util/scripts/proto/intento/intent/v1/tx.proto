syntax = "proto3";

package intento.intent.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "intento/intent/v1/flow.proto";
import "intento/intent/v1/params.proto";
import "intento/intent/v1/trustless_agent.proto";

option go_package = "github.com/trstlabs/intento/x/intent/types";

// Msg defines the ica-authentication Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // Register defines a rpc handler for MsgRegisterAccount
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse) {
    option (google.api.http).post = "/intento/intent/v1/register-account";
  }
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse) {
    option (google.api.http).post = "/intento/intent/v1/submit-tx";
  }
  rpc SubmitFlow(MsgSubmitFlow) returns (MsgSubmitFlowResponse) {
    option (google.api.http).post = "/intento/intent/v1/submit-flow";
  }
  rpc RegisterAccountAndSubmitFlow(MsgRegisterAccountAndSubmitFlow) returns (MsgRegisterAccountAndSubmitFlowResponse) {
    option (google.api.http).post = "/intento/intent/v1/register-account-submit-flow";
  }
  rpc UpdateFlow(MsgUpdateFlow) returns (MsgUpdateFlowResponse) {
    option (google.api.http).post = "/intento/intent/v1/update-flow";
  }
  rpc CreateTrustlessAgent(MsgCreateTrustlessAgent) returns (MsgCreateTrustlessAgentResponse) {
    option (google.api.http).post = "/intento/intent/v1/create-trustless-execution-agent";
  }
  rpc UpdateTrustlessAgentFeeConfig(MsgUpdateTrustlessAgentFeeConfig) returns (MsgUpdateTrustlessAgentFeeConfigResponse) {
    option (google.api.http).post = "/intento/intent/v1/update-trustless-execution-agent-fee-config";
  }
  // UpdateParams defines a governance operation for updating the x/intent module
  // parameters. The authority is hard-coded to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (google.api.http).post = "/intento/intent/v1/params";
  }
}

// MsgRegisterAccount registers an interchain account for the given owner over
// the specified connection pair
message MsgRegisterAccount {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "intent/MsgRegisterAccount";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string connection_id = 2 [(gogoproto.customname) = "ConnectionID"];
  string version = 3;
}

// MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
message MsgRegisterAccountResponse {}

// MsgSubmitTx creates and submits an arbitrary msg to be executed
// locally or using an interchain account
message MsgSubmitTx {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "intent/MsgRegisterAccount";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string connection_id = 2 [(gogoproto.customname) = "ConnectionID"];
  google.protobuf.Any msg = 3;
}

// MsgSubmitTxResponse defines the MsgSubmitTx response type
message MsgSubmitTxResponse {}

// MsgSubmitFlow creates, submits and schedules msgs
// to be executed locally or over IBC with conditions
message MsgSubmitFlow {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "intent/MsgSubmitFlow";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string label = 2;
  repeated google.protobuf.Any msgs = 3 [(cosmos_proto.accepts_interface) = "sdk.Msg"];
  // duration defines the time that the code should run for
  string duration = 4;
  // start_at when set as a unix time after block inclusion, creates a custom
  // start time for execution
  uint64 start_at = 5;
  // interval defines the interval between auto_msg calls
  string interval = 6;
  // optional fees to be used for flow execution limiting the amount of fees
  // incurred
  repeated cosmos.base.v1beta1.Coin fee_funds = 7 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_funds\""
  ];
  // optional configuration parameters
  ExecutionConfiguration configuration = 8;
  // optional connection ID interchain account
  string connection_id = 9 [(gogoproto.customname) = "ConnectionID"];
  // optional use of a trustless excution agent
  TrustlessAgentExecutionConfig trustless_agent_config = 10 [(gogoproto.customname) = "TrustlessAgentExecutionConfig"];
  ExecutionConditions conditions = 11;
}

// MsgSubmitTxResponse defines the MsgSubmitTx response type
message MsgSubmitFlowResponse {}

// MsgRegisterAccountAndSubmitFlow creates an interchain account, submits and
// schedules an arbitrary msg to be executed by this interchain
// account
message MsgRegisterAccountAndSubmitFlow {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "intent/MsgRegisterAccountAndSubmitFlow";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  string connection_id = 2 [(gogoproto.customname) = "ConnectionID"];
  string label = 3;
  repeated google.protobuf.Any msgs = 4 [(cosmos_proto.accepts_interface) = "sdk.Msg"];
  // duration defines the time that the code should run for
  string duration = 5;
  // start_at when set as a unix time after block inclusion, creates a custom
  // start time for execution
  uint64 start_at = 6;
  // interval defines the interval between auto_msg calls
  string interval = 7;
  // optional fees to be used for flow execution limiting the amount of fees
  // incurred
  repeated cosmos.base.v1beta1.Coin fee_funds = 8 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_funds\""
  ];
  // optional array of dependent txs that should be executed before execution is
  // allowed
  ExecutionConfiguration configuration = 9;
  string version = 10;
  string host_connection_id = 11 [(gogoproto.customname) = "HostConnectionID"];
  ExecutionConditions conditions = 12;
}

// MsgRegisterAccountAndSubmitFlowResponse defines the MsgSubmitTx response
// type
message MsgRegisterAccountAndSubmitFlowResponse {}

// MsgUpdateFlow updates an arbitrary msg to be executed locally
// or using an interchain account
message MsgUpdateFlow {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "intent/MsgUpdateFlow";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string owner = 1;
  uint64 id = 2 [(gogoproto.customname) = "ID"];
  string label = 3;
  repeated google.protobuf.Any msgs = 4 [(cosmos_proto.accepts_interface) = "sdk.Msg"];
  // end_time when set defines the time that the code should run for
  uint64 end_time = 5;
  // start_at when set as a unix time after block inclusion, creates a custom
  // start time for execution
  uint64 start_at = 6;
  // interval defines the interval between auto_msg calls
  string interval = 7;
  // add fees for flow execution, optional
  repeated cosmos.base.v1beta1.Coin fee_funds = 8 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee_funds\""
  ];
  ExecutionConfiguration configuration = 9;
  string connection_id = 10 [(gogoproto.customname) = "ConnectionID"];
  TrustlessAgentExecutionConfig trustless_agent_config = 11 [(gogoproto.customname) = "TrustlessAgentExecutionConfig"];
  ExecutionConditions conditions = 12;
}

// MsgUpdateTxResponse defines the MsgUpdateTx response type
message MsgUpdateFlowResponse {}

message MsgCreateTrustlessAgent {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "intent/MsgCreateTrustlessAgent";
  option (gogoproto.goproto_getters) = false;
  string creator = 1;
  string connection_id = 2 [(gogoproto.customname) = "ConnectionID"];
  string host_connection_id = 3 [(gogoproto.customname) = "HostConnectionID"];
  string version = 4;
  repeated cosmos.base.v1beta1.Coin fee_coins_supported = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message MsgCreateTrustlessAgentResponse {
  string address = 1;
}

message MsgUpdateTrustlessAgentFeeConfig {
  option (cosmos.msg.v1.signer) = "fee_admin";
  option (amino.name) = "intent/MsgUpdateTrustlessAgentFeeConfig";
  option (gogoproto.goproto_getters) = false;
  string fee_admin = 1;
  string agent_address = 2;
  TrustlessAgentFeeConfig fee_config = 4;
}

message MsgUpdateTrustlessAgentFeeConfigResponse {
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "intent/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // params defines the x/intent parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
