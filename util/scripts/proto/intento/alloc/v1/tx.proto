syntax = "proto3";
package intento.alloc.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "intento/alloc/v1/params.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/trstlabs/intento/x/alloc/types";

// Msg defines the alloc Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // FundFairburnPool defines a method to allow an account to directly
  // fund the fee collector module account.
  rpc FundFairburnPool(MsgFundFairburnPool) returns (MsgFundFairburnPoolResponse);

  // UpdateParams updates the alloc module's parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgFundFairburnPool allows an account to directly
// fund the fee collector pool.
message MsgFundFairburnPool {
  option (amino.name) = "alloc/MsgFundFairburnPool";
  option (cosmos.msg.v1.signer) = "sender";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1;

  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (amino.encoding) = "legacy_coins"
  ];
}

// MsgFundFairburnPoolResponse defines the Msg/MsgFundFairburnPool response
// type.
message MsgFundFairburnPoolResponse {}

// MsgUpdateParams is the request type for updating module's params.
//
// Since: v14
message MsgUpdateParams {
  option (amino.name) = "alloc/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";
  // Authority is the address of the governance account.
  string authority = 1;
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.jsontag) = "params",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse is the response type for executing
// an update.
// Since: v14
message MsgUpdateParamsResponse {}