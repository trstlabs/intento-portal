{
  "$ref": "#/definitions/MsgTransfer",
  "definitions": {
    "MsgTransfer": {
      "properties": {
        "sourcePort": {
          "type": "string",
          "description": "the port on which the packet will be sent"
        },
        "sourceChannel": {
          "type": "string",
          "description": "the channel by which the packet will be sent"
        },
        "token": {
          "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
          "additionalProperties": false,
          "description": "token to be transferred"
        },
        "sender": {
          "type": "string",
          "description": "the sender address"
        },
        "receiver": {
          "type": "string",
          "description": "the recipient address on the destination chain"
        },
        "timeoutHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": false,
          "description": "Timeout height relative to the current block height. If you are sending with IBC v1 protocol, either timeout_height or timeout_timestamp must be set. If you are sending with IBC v2 protocol, timeout_timestamp must be set, and timeout_height must be omitted."
        },
        "timeoutTimestamp": {
          "type": "string",
          "description": "Timeout timestamp in absolute nanoseconds since unix epoch. If you are sending with IBC v1 protocol, either timeout_height or timeout_timestamp must be set. If you are sending with IBC v2 protocol, timeout_timestamp must be set."
        },
        "memo": {
          "type": "string",
          "description": "optional memo"
        },
        "encoding": {
          "type": "string",
          "description": "optional encoding"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Msg Transfer",
      "description": "MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between ICS20 enabled chains. See ICS Spec here: https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures"
    },
    "cosmos.base.v1beta1.Coin": {
      "properties": {
        "denom": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Coin",
      "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset Please note that json tags for generated Go code are overridden to explicitly exclude the omitempty jsontag. This enforces the Go json marshaller to always emit zero values for both revision_number and revision_height."
    }
  }
}
