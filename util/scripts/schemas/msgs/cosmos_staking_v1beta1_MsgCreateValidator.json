{
  "$ref": "#/definitions/MsgCreateValidator",
  "definitions": {
    "MsgCreateValidator": {
      "properties": {
        "description": {
          "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
          "additionalProperties": false
        },
        "commission": {
          "$ref": "#/definitions/cosmos.staking.v1beta1.CommissionRates",
          "additionalProperties": false
        },
        "minSelfDelegation": {
          "type": "string"
        },
        "delegatorAddress": {
          "type": "string",
          "description": "Deprecated: Use of Delegator Address in MsgCreateValidator is deprecated. The validator address bytes and delegator address bytes refer to the same account while creating validator (defer only in bech32 notation)."
        },
        "validatorAddress": {
          "type": "string"
        },
        "pubkey": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            }
          },
          "additionalProperties": true,
          "type": "object"
        },
        "value": {
          "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Msg Create Validator",
      "description": "MsgCreateValidator defines a SDK message for creating a new validator."
    },
    "cosmos.base.v1beta1.Coin": {
      "properties": {
        "denom": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Coin",
      "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
    },
    "cosmos.staking.v1beta1.CommissionRates": {
      "properties": {
        "rate": {
          "type": "string",
          "description": "rate is the commission rate charged to delegators, as a fraction."
        },
        "maxRate": {
          "type": "string",
          "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
        },
        "maxChangeRate": {
          "type": "string",
          "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Commission Rates",
      "description": "CommissionRates defines the initial commission rates to be used for creating a validator."
    },
    "cosmos.staking.v1beta1.Description": {
      "properties": {
        "moniker": {
          "type": "string",
          "description": "moniker defines a human-readable name for the validator."
        },
        "identity": {
          "type": "string",
          "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
        },
        "website": {
          "type": "string",
          "description": "website defines an optional website link."
        },
        "securityContact": {
          "type": "string",
          "description": "security_contact defines an optional email for security contact."
        },
        "details": {
          "type": "string",
          "description": "details define other optional details."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Description",
      "description": "Description defines a validator description."
    }
  }
}
