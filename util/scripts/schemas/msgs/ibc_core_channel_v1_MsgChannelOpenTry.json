{
  "$ref": "#/definitions/MsgChannelOpenTry",
  "definitions": {
    "MsgChannelOpenTry": {
      "properties": {
        "portId": {
          "type": "string"
        },
        "previousChannelId": {
          "type": "string",
          "description": "Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC."
        },
        "channel": {
          "$ref": "#/definitions/ibc.core.channel.v1.Channel",
          "additionalProperties": false,
          "description": "NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC."
        },
        "counterpartyVersion": {
          "type": "string"
        },
        "proofInit": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": false
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Msg Channel Open Try",
      "description": "MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel on Chain B. The version field within the Channel field has been deprecated. Its value will be ignored by core IBC."
    },
    "ibc.core.channel.v1.Channel": {
      "properties": {
        "state": {
          "enum": [
            "STATE_UNINITIALIZED_UNSPECIFIED",
            "STATE_INIT",
            "STATE_TRYOPEN",
            "STATE_OPEN",
            "STATE_CLOSED"
          ],
          "type": "string",
          "title": "State",
          "description": "State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN, or UNINITIALIZED."
        },
        "ordering": {
          "enum": [
            "ORDER_NONE_UNSPECIFIED",
            "ORDER_UNORDERED",
            "ORDER_ORDERED"
          ],
          "type": "string",
          "title": "Order",
          "description": "Order defines if a channel is ORDERED or UNORDERED"
        },
        "counterparty": {
          "$ref": "#/definitions/ibc.core.channel.v1.Counterparty",
          "additionalProperties": false,
          "description": "counterparty channel end"
        },
        "connectionHops": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of connection identifiers, in order, along which packets sent on this channel will travel"
        },
        "version": {
          "type": "string",
          "description": "opaque channel version, which is agreed upon during the handshake"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Channel",
      "description": "Channel defines pipeline for exactly-once packet delivery between specific modules on separate blockchains, which has at least one end capable of sending packets and one end capable of receiving packets."
    },
    "ibc.core.channel.v1.Counterparty": {
      "properties": {
        "portId": {
          "type": "string",
          "description": "port on the counterparty chain which owns the other end of the channel."
        },
        "channelId": {
          "type": "string",
          "description": "channel end on the counterparty chain"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Counterparty",
      "description": "Counterparty defines a channel end counterparty"
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset Please note that json tags for generated Go code are overridden to explicitly exclude the omitempty jsontag. This enforces the Go json marshaller to always emit zero values for both revision_number and revision_height."
    }
  }
}
