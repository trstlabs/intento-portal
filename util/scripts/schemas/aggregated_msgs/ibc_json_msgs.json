{
  "$ref": "#/definitions/MsgTransfer",
  "definitions": {
    "MsgTransfer": {
      "properties": {
        "sourcePort": {
          "type": "string",
          "description": "the port on which the packet will be sent"
        },
        "sourceChannel": {
          "type": "string",
          "description": "the channel by which the packet will be sent"
        },
        "token": {
          "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
          "additionalProperties": true,
          "description": "the tokens to be transferred"
        },
        "sender": {
          "type": "string",
          "description": "the sender address"
        },
        "receiver": {
          "type": "string",
          "description": "the recipient address on the destination chain"
        },
        "timeoutHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true,
          "description": "Timeout height relative to the current block height. The timeout is disabled when set to 0."
        },
        "timeoutTimestamp": {
          "type": "string",
          "description": "Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Transfer",
      "description": "MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between ICS20 enabled chains. See ICS Spec here: https://github.com/cosmos/ics/tree/master/spec/ics-020-fungible-token-transfer#data-structures"
    },
    "cosmos.base.v1beta1.Coin": {
      "properties": {
        "denom": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Coin",
      "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgAcknowledgement",
  "definitions": {
    "MsgAcknowledgement": {
      "properties": {
        "packet": {
          "$ref": "#/definitions/ibc.core.channel.v1.Packet",
          "additionalProperties": true
        },
        "acknowledgement": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofAcked": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Acknowledgement",
      "description": "MsgAcknowledgement receives incoming IBC acknowledgement"
    },
    "ibc.core.channel.v1.Packet": {
      "properties": {
        "sequence": {
          "type": "string",
          "description": "number corresponds to the order of sends and receives, where a Packet with an earlier sequence number must be sent and received before a Packet with a later sequence number."
        },
        "sourcePort": {
          "type": "string",
          "description": "identifies the port on the sending chain."
        },
        "sourceChannel": {
          "type": "string",
          "description": "identifies the channel end on the sending chain."
        },
        "destinationPort": {
          "type": "string",
          "description": "identifies the port on the receiving chain."
        },
        "destinationChannel": {
          "type": "string",
          "description": "identifies the channel end on the receiving chain."
        },
        "data": {
          "type": "string",
          "description": "actual opaque bytes transferred directly to the application module",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "timeoutHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true,
          "description": "block height after which the packet times out"
        },
        "timeoutTimestamp": {
          "type": "string",
          "description": "block timestamp (in nanoseconds) after which the packet times out"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Packet",
      "description": "Packet defines a type that carries data across different chains through IBC"
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgChannelCloseConfirm",
  "definitions": {
    "MsgChannelCloseConfirm": {
      "properties": {
        "portId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "proofInit": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Channel Close Confirm",
      "description": "MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to CLOSED on Chain A."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgChannelCloseInit",
  "definitions": {
    "MsgChannelCloseInit": {
      "properties": {
        "portId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Channel Close Init",
      "description": "MsgChannelCloseInit defines a msg sent by a Relayer to Chain A to close a channel with Chain B."
    }
  }
}
{
  "$ref": "#/definitions/MsgChannelOpenAck",
  "definitions": {
    "MsgChannelOpenAck": {
      "properties": {
        "portId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "counterpartyChannelId": {
          "type": "string"
        },
        "counterpartyVersion": {
          "type": "string"
        },
        "proofTry": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Channel Open Ack",
      "description": "MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge the change of channel state to TRYOPEN on Chain B."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgChannelOpenConfirm",
  "definitions": {
    "MsgChannelOpenConfirm": {
      "properties": {
        "portId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "proofAck": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Channel Open Confirm",
      "description": "MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to OPEN on Chain A."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgChannelOpenInit",
  "definitions": {
    "MsgChannelOpenInit": {
      "properties": {
        "portId": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/ibc.core.channel.v1.Channel",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Channel Open Init",
      "description": "MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It is called by a relayer on Chain A."
    },
    "ibc.core.channel.v1.Channel": {
      "properties": {
        "state": {
          "enum": [
            "STATE_UNINITIALIZED_UNSPECIFIED",
            0,
            "STATE_INIT",
            1,
            "STATE_TRYOPEN",
            2,
            "STATE_OPEN",
            3,
            "STATE_CLOSED",
            4
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED."
        },
        "ordering": {
          "enum": [
            "ORDER_NONE_UNSPECIFIED",
            0,
            "ORDER_UNORDERED",
            1,
            "ORDER_ORDERED",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Order",
          "description": "Order defines if a channel is ORDERED or UNORDERED"
        },
        "counterparty": {
          "$ref": "#/definitions/ibc.core.channel.v1.Counterparty",
          "additionalProperties": true,
          "description": "counterparty channel end"
        },
        "connectionHops": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of connection identifiers, in order, along which packets sent on this channel will travel"
        },
        "version": {
          "type": "string",
          "description": "opaque channel version, which is agreed upon during the handshake"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Channel",
      "description": "Channel defines pipeline for exactly-once packet delivery between specific modules on separate blockchains, which has at least one end capable of sending packets and one end capable of receiving packets."
    },
    "ibc.core.channel.v1.Counterparty": {
      "properties": {
        "portId": {
          "type": "string",
          "description": "port on the counterparty chain which owns the other end of the channel."
        },
        "channelId": {
          "type": "string",
          "description": "channel end on the counterparty chain"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Counterparty",
      "description": "Counterparty defines a channel end counterparty"
    }
  }
}
{
  "$ref": "#/definitions/MsgChannelOpenTry",
  "definitions": {
    "MsgChannelOpenTry": {
      "properties": {
        "portId": {
          "type": "string"
        },
        "previousChannelId": {
          "type": "string",
          "description": "in the case of crossing hello's, when both chains call OpenInit, we need the channel identifier of the previous channel in state INIT"
        },
        "channel": {
          "$ref": "#/definitions/ibc.core.channel.v1.Channel",
          "additionalProperties": true
        },
        "counterpartyVersion": {
          "type": "string"
        },
        "proofInit": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Channel Open Try",
      "description": "MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel on Chain B."
    },
    "ibc.core.channel.v1.Channel": {
      "properties": {
        "state": {
          "enum": [
            "STATE_UNINITIALIZED_UNSPECIFIED",
            0,
            "STATE_INIT",
            1,
            "STATE_TRYOPEN",
            2,
            "STATE_OPEN",
            3,
            "STATE_CLOSED",
            4
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "State",
          "description": "State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED."
        },
        "ordering": {
          "enum": [
            "ORDER_NONE_UNSPECIFIED",
            0,
            "ORDER_UNORDERED",
            1,
            "ORDER_ORDERED",
            2
          ],
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            }
          ],
          "title": "Order",
          "description": "Order defines if a channel is ORDERED or UNORDERED"
        },
        "counterparty": {
          "$ref": "#/definitions/ibc.core.channel.v1.Counterparty",
          "additionalProperties": true,
          "description": "counterparty channel end"
        },
        "connectionHops": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of connection identifiers, in order, along which packets sent on this channel will travel"
        },
        "version": {
          "type": "string",
          "description": "opaque channel version, which is agreed upon during the handshake"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Channel",
      "description": "Channel defines pipeline for exactly-once packet delivery between specific modules on separate blockchains, which has at least one end capable of sending packets and one end capable of receiving packets."
    },
    "ibc.core.channel.v1.Counterparty": {
      "properties": {
        "portId": {
          "type": "string",
          "description": "port on the counterparty chain which owns the other end of the channel."
        },
        "channelId": {
          "type": "string",
          "description": "channel end on the counterparty chain"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Counterparty",
      "description": "Counterparty defines a channel end counterparty"
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgRecvPacket",
  "definitions": {
    "MsgRecvPacket": {
      "properties": {
        "packet": {
          "$ref": "#/definitions/ibc.core.channel.v1.Packet",
          "additionalProperties": true
        },
        "proofCommitment": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Recv Packet",
      "description": "MsgRecvPacket receives incoming IBC packet"
    },
    "ibc.core.channel.v1.Packet": {
      "properties": {
        "sequence": {
          "type": "string",
          "description": "number corresponds to the order of sends and receives, where a Packet with an earlier sequence number must be sent and received before a Packet with a later sequence number."
        },
        "sourcePort": {
          "type": "string",
          "description": "identifies the port on the sending chain."
        },
        "sourceChannel": {
          "type": "string",
          "description": "identifies the channel end on the sending chain."
        },
        "destinationPort": {
          "type": "string",
          "description": "identifies the port on the receiving chain."
        },
        "destinationChannel": {
          "type": "string",
          "description": "identifies the channel end on the receiving chain."
        },
        "data": {
          "type": "string",
          "description": "actual opaque bytes transferred directly to the application module",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "timeoutHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true,
          "description": "block height after which the packet times out"
        },
        "timeoutTimestamp": {
          "type": "string",
          "description": "block timestamp (in nanoseconds) after which the packet times out"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Packet",
      "description": "Packet defines a type that carries data across different chains through IBC"
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgTimeout",
  "definitions": {
    "MsgTimeout": {
      "properties": {
        "packet": {
          "$ref": "#/definitions/ibc.core.channel.v1.Packet",
          "additionalProperties": true
        },
        "proofUnreceived": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "nextSequenceRecv": {
          "type": "string"
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Timeout",
      "description": "MsgTimeout receives timed-out packet"
    },
    "ibc.core.channel.v1.Packet": {
      "properties": {
        "sequence": {
          "type": "string",
          "description": "number corresponds to the order of sends and receives, where a Packet with an earlier sequence number must be sent and received before a Packet with a later sequence number."
        },
        "sourcePort": {
          "type": "string",
          "description": "identifies the port on the sending chain."
        },
        "sourceChannel": {
          "type": "string",
          "description": "identifies the channel end on the sending chain."
        },
        "destinationPort": {
          "type": "string",
          "description": "identifies the port on the receiving chain."
        },
        "destinationChannel": {
          "type": "string",
          "description": "identifies the channel end on the receiving chain."
        },
        "data": {
          "type": "string",
          "description": "actual opaque bytes transferred directly to the application module",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "timeoutHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true,
          "description": "block height after which the packet times out"
        },
        "timeoutTimestamp": {
          "type": "string",
          "description": "block timestamp (in nanoseconds) after which the packet times out"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Packet",
      "description": "Packet defines a type that carries data across different chains through IBC"
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgTimeoutOnClose",
  "definitions": {
    "MsgTimeoutOnClose": {
      "properties": {
        "packet": {
          "$ref": "#/definitions/ibc.core.channel.v1.Packet",
          "additionalProperties": true
        },
        "proofUnreceived": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofClose": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "nextSequenceRecv": {
          "type": "string"
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Timeout On Close",
      "description": "MsgTimeoutOnClose timed-out packet upon counterparty channel closure."
    },
    "ibc.core.channel.v1.Packet": {
      "properties": {
        "sequence": {
          "type": "string",
          "description": "number corresponds to the order of sends and receives, where a Packet with an earlier sequence number must be sent and received before a Packet with a later sequence number."
        },
        "sourcePort": {
          "type": "string",
          "description": "identifies the port on the sending chain."
        },
        "sourceChannel": {
          "type": "string",
          "description": "identifies the channel end on the sending chain."
        },
        "destinationPort": {
          "type": "string",
          "description": "identifies the port on the receiving chain."
        },
        "destinationChannel": {
          "type": "string",
          "description": "identifies the channel end on the receiving chain."
        },
        "data": {
          "type": "string",
          "description": "actual opaque bytes transferred directly to the application module",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "timeoutHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true,
          "description": "block height after which the packet times out"
        },
        "timeoutTimestamp": {
          "type": "string",
          "description": "block timestamp (in nanoseconds) after which the packet times out"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Packet",
      "description": "Packet defines a type that carries data across different chains through IBC"
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgCreateClient",
  "definitions": {
    "MsgCreateClient": {
      "properties": {
        "clientState": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "description": "light client state"
        },
        "consensusState": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "description": "consensus state associated with the client that corresponds to a given height."
        },
        "signer": {
          "type": "string",
          "description": "signer address"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Create Client",
      "description": "MsgCreateClient defines a message to create an IBC client"
    }
  }
}
{
  "$ref": "#/definitions/MsgSubmitMisbehaviour",
  "definitions": {
    "MsgSubmitMisbehaviour": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "client unique identifier"
        },
        "misbehaviour": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "description": "misbehaviour used for freezing the light client"
        },
        "signer": {
          "type": "string",
          "description": "signer address"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Submit Misbehaviour",
      "description": "MsgSubmitMisbehaviour defines an sdk.Msg type that submits Evidence for light client misbehaviour."
    }
  }
}
{
  "$ref": "#/definitions/MsgUpdateClient",
  "definitions": {
    "MsgUpdateClient": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "client unique identifier"
        },
        "header": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "description": "header to update the light client"
        },
        "signer": {
          "type": "string",
          "description": "signer address"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Update Client",
      "description": "MsgUpdateClient defines an sdk.Msg to update a IBC client state using the given header."
    }
  }
}
{
  "$ref": "#/definitions/MsgUpgradeClient",
  "definitions": {
    "MsgUpgradeClient": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "client unique identifier"
        },
        "clientState": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "description": "upgraded client state"
        },
        "consensusState": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "description": "upgraded consensus state, only contains enough information to serve as a basis of trust in update logic"
        },
        "proofUpgradeClient": {
          "type": "string",
          "description": "proof that old chain committed to new client",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofUpgradeConsensusState": {
          "type": "string",
          "description": "proof that old chain committed to new consensus state",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "signer": {
          "type": "string",
          "description": "signer address"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Upgrade Client",
      "description": "MsgUpgradeClient defines an sdk.Msg to upgrade an IBC client to a new client state"
    }
  }
}
{
  "$ref": "#/definitions/MsgConnectionOpenAck",
  "definitions": {
    "MsgConnectionOpenAck": {
      "properties": {
        "connectionId": {
          "type": "string"
        },
        "counterpartyConnectionId": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/ibc.core.connection.v1.Version",
          "additionalProperties": true
        },
        "clientState": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "proofTry": {
          "type": "string",
          "description": "proof of the initialization the connection on Chain B: `UNITIALIZED -> TRYOPEN`",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofClient": {
          "type": "string",
          "description": "proof of client state included in message",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofConsensus": {
          "type": "string",
          "description": "proof of client consensus state",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "consensusHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Connection Open Ack",
      "description": "MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to acknowledge the change of connection state to TRYOPEN on Chain B."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    },
    "ibc.core.connection.v1.Version": {
      "properties": {
        "identifier": {
          "type": "string",
          "description": "unique version identifier"
        },
        "features": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of features compatible with the specified identifier"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Version",
      "description": "Version defines the versioning scheme used to negotiate the IBC verison in the connection handshake."
    }
  }
}
{
  "$ref": "#/definitions/MsgConnectionOpenConfirm",
  "definitions": {
    "MsgConnectionOpenConfirm": {
      "properties": {
        "connectionId": {
          "type": "string"
        },
        "proofAck": {
          "type": "string",
          "description": "proof for the change of the connection state on Chain A: `INIT -> OPEN`",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Connection Open Confirm",
      "description": "MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B to acknowledge the change of connection state to OPEN on Chain A."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    }
  }
}
{
  "$ref": "#/definitions/MsgConnectionOpenInit",
  "definitions": {
    "MsgConnectionOpenInit": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "counterparty": {
          "$ref": "#/definitions/ibc.core.connection.v1.Counterparty",
          "additionalProperties": true
        },
        "version": {
          "$ref": "#/definitions/ibc.core.connection.v1.Version",
          "additionalProperties": true
        },
        "delayPeriod": {
          "type": "string"
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Connection Open Init",
      "description": "MsgConnectionOpenInit defines the msg sent by an account on Chain A to initialize a connection with Chain B."
    },
    "ibc.core.commitment.v1.MerklePrefix": {
      "properties": {
        "keyPrefix": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Merkle Prefix",
      "description": "MerklePrefix is merkle path prefixed to the key. The constructed key from the Path and the key will be append(Path.KeyPath, append(Path.KeyPrefix, key...))"
    },
    "ibc.core.connection.v1.Counterparty": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "identifies the client on the counterparty chain associated with a given connection."
        },
        "connectionId": {
          "type": "string",
          "description": "identifies the connection end on the counterparty chain associated with a given connection."
        },
        "prefix": {
          "$ref": "#/definitions/ibc.core.commitment.v1.MerklePrefix",
          "additionalProperties": true,
          "description": "commitment merkle prefix of the counterparty chain."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Counterparty",
      "description": "Counterparty defines the counterparty chain associated with a connection end."
    },
    "ibc.core.connection.v1.Version": {
      "properties": {
        "identifier": {
          "type": "string",
          "description": "unique version identifier"
        },
        "features": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of features compatible with the specified identifier"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Version",
      "description": "Version defines the versioning scheme used to negotiate the IBC verison in the connection handshake."
    }
  }
}
{
  "$ref": "#/definitions/MsgConnectionOpenTry",
  "definitions": {
    "MsgConnectionOpenTry": {
      "properties": {
        "clientId": {
          "type": "string"
        },
        "previousConnectionId": {
          "type": "string",
          "description": "in the case of crossing hello's, when both chains call OpenInit, we need the connection identifier of the previous connection in state INIT"
        },
        "clientState": {
          "properties": {
            "typeUrl": {
              "type": "string",
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
            },
            "value": {
              "type": "string",
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object"
        },
        "counterparty": {
          "$ref": "#/definitions/ibc.core.connection.v1.Counterparty",
          "additionalProperties": true
        },
        "delayPeriod": {
          "type": "string"
        },
        "counterpartyVersions": {
          "items": {
            "$ref": "#/definitions/ibc.core.connection.v1.Version"
          },
          "type": "array"
        },
        "proofHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "proofInit": {
          "type": "string",
          "description": "proof of the initialization the connection on Chain A: `UNITIALIZED -> INIT`",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofClient": {
          "type": "string",
          "description": "proof of client state included in message",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "proofConsensus": {
          "type": "string",
          "description": "proof of client consensus state",
          "format": "binary",
          "binaryEncoding": "base64"
        },
        "consensusHeight": {
          "$ref": "#/definitions/ibc.core.client.v1.Height",
          "additionalProperties": true
        },
        "signer": {
          "type": "string"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Msg Connection Open Try",
      "description": "MsgConnectionOpenTry defines a msg sent by a Relayer to try to open a connection on Chain B."
    },
    "ibc.core.client.v1.Height": {
      "properties": {
        "revisionNumber": {
          "type": "string",
          "description": "the revision that the client is currently on"
        },
        "revisionHeight": {
          "type": "string",
          "description": "the height within the given revision"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Height",
      "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
    },
    "ibc.core.commitment.v1.MerklePrefix": {
      "properties": {
        "keyPrefix": {
          "type": "string",
          "format": "binary",
          "binaryEncoding": "base64"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Merkle Prefix",
      "description": "MerklePrefix is merkle path prefixed to the key. The constructed key from the Path and the key will be append(Path.KeyPath, append(Path.KeyPrefix, key...))"
    },
    "ibc.core.connection.v1.Counterparty": {
      "properties": {
        "clientId": {
          "type": "string",
          "description": "identifies the client on the counterparty chain associated with a given connection."
        },
        "connectionId": {
          "type": "string",
          "description": "identifies the connection end on the counterparty chain associated with a given connection."
        },
        "prefix": {
          "$ref": "#/definitions/ibc.core.commitment.v1.MerklePrefix",
          "additionalProperties": true,
          "description": "commitment merkle prefix of the counterparty chain."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Counterparty",
      "description": "Counterparty defines the counterparty chain associated with a connection end."
    },
    "ibc.core.connection.v1.Version": {
      "properties": {
        "identifier": {
          "type": "string",
          "description": "unique version identifier"
        },
        "features": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "list of features compatible with the specified identifier"
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Version",
      "description": "Version defines the versioning scheme used to negotiate the IBC verison in the connection handshake."
    }
  }
}
